import base64

# please don't decode this program. It's a violation of the honor code.
code=""
eval(compile(base64.b64decode(code), "<string>", 'exec'))




